 Die Kamera läuft jetzt auch wieder, also nochmal herzlich willkommen. Wir sprechen über diskrete Mathematik, über ganzzahlige Teilbarkeit vor dem Hintergrund der Kryptographie, also vor dem Hintergrund, dass wir gerne Nachrichten verschlüsseln möchten. Und da wir die Beschäftigung mit Primzahlen und Teilbarkeit nicht aus mathematischem Selbstzweck betreiben, möchte ich Ihnen gerne nochmal kurz motivieren, was das Ganze denn überhaupt zu tun hat mit Kryptographie oder was denn so unser großes Ziel ist, auch dass wir gerne hinsteuern möchten. Also, wenn wir eine Nachricht haben, die wir kodieren möchten, dann können wir diese Nachricht erstmal als lange Zahl ausdrücken. Also, wir nehmen uns die ganze Nachricht oder wir nehmen uns einen kleinen Teil der Nachricht, drücken die entsprechend als Zahl aus. Also, wenn Sie zum Beispiel so einen ASCII-Byte haben, dann wäre das 8-Bit, also 2 hoch 8 Möglichkeiten, entsprechend die Zahlen von 0 bis 255, ist das wie der Computer Ihnen typischerweise einen Buchstaben kodiert. Dann haben Sie also Großbuchstaben, Kleinbuchstaben und ein paar Sonderzeichen und Sie kennen das wahrscheinlich, wenn Sie an Ihrem Computer die Alttaste drücken und geben dann eine Zahl zwischen 0 und 255 ein, dann erscheint entsprechend der Buchstabe, der zu dieser Zahl gehört oder das Sonderzeichen, was zu dieser Zahl gehört. Machen wir uns das Leben leichter und nehmen nur die Zahlen von 0 bis 99, also nur die 100 wichtigsten Zeichen. Dann haben wir nur 100 Zeichen, das ist entsprechend leichter für uns damit umzugehen. Das nennen wir z.B. 100. Und dann würde also eine Verschlüsselung, die einfach Buchstaben für Buchstaben verschlüsselt, das wäre entsprechend mathematisch eine Funktion, die kriegt einen unverschlüsselten Buchstaben und macht daraus einen verschlüsselten Buchstaben. Das heißt, dieses F müsste diese 100 Zahlen irgendwie abbilden in die 100 Zahlen, sodass eben kein Buchstabe gleich bleibt, damit entsprechend jemand, der den Schlüssel nicht kennt, der das F nicht kennt, der F hoch minus 1 nicht kennt, die Umkehrfunktion nicht kennt, dass er das Ganze nicht lesen könnte. Mit 100 Zahlen müssen Sie das nicht als mathematische Funktion hinschreiben mit einer mathematischen Rechenvorschrift. Bei 100 Zahlen würden Sie sich einfach eine Tabelle machen können, wo entsprechend drin steht eine lange If-Anweisung in Ihrem Programm, die würde entsprechend jede Zahl durch eine andere ersetzen. Wir hatten es in einem der letzten Vorlesungen mal kurz durchgerechnet, wenn Sie jetzt nicht einen Buchstaben kodieren, sondern Sie möchten z.B. Wörter aus 5 Buchstaben kodieren und Sie nehmen diese 100 wichtigsten Buchstaben, dann hätten Sie schon 100 hoch 5 Möglichkeiten, also entsprechend 10 hoch 2 hoch 5 sind 10 hoch 10, also das heißt, es sind 10 Milliarden an Möglichkeiten und wenn Sie die dann auch noch alle aufschreiben wollen, dann sind Sie im Bereich, wir hatten es mal grob überschlagen, von 100 Gigabyte, die allein Ihre Verschlüsselungstabelle hätten. Und Sie wollen natürlich nicht Wörter aus 5 Buchstaben kodieren, sondern Sie möchten lange Texte kodieren, vielleicht aus 10, 20, 100 Zeichen. Das heißt, mit Tabellen kommen wir da nicht weiter bei Verschlüsselung, sondern was wir brauchen, ist eine Möglichkeit dieses F auf eine einfache Art und Weise darzustellen, der uns dann für alle vielleicht 10 Milliarden 5 buchstabigen Wörter sagt, was F angewendet darauf ergibt. Das heißt, das klappt nicht mehr mit einer Tabelle, da müssen wir eine mathematische Vorschrift für angeben. Und eine Möglichkeit wäre jetzt zu sagen, wir könnten z.B. sagen, unser F könnte einfach etwas addieren. Also unser F könnte sich irgendeine Zahl nehmen aus Z hoch 100, bleiben wir bei diesem Beispiel mit Z hoch 100, dass wir nur einen Buchstab kodieren wollen, und dann würde das F das A abbilden auf z.B. A plus 1. Also wir ersetzen jeden Buchstaben einfach durch seinen Nachfolger. Das wäre natürlich leicht zu knacken, wenn wir da einfach einen plus 1 machen. Also machen wir was komplizierteres, nehmen so etwas wie A plus 37, dann sieht man vielleicht auch mit bloßem Auge nicht mehr, wie das Ganze ersetzt wurde. Aber das ist natürlich auch was, was Sie mit einem systematischen Ansatz ganz, ganz schnell dekodiert kriegen würden. Aber es wäre schon eine einfache Rechenvorschrift, die viel kürzer hinzuschreiben ist als eine Tabelle, die alle 100 Zeichen auflistet. Und diese einfache Rechenvorschrift, die könnten Sie auch dann anwenden, wenn Sie da irgendwie 10 Milliarden an Zeichen hätten. Also 10 Milliarden Zahlen. Das heißt, zu diesen 10 Milliarden Zahlen müssten Sie einfach nur jeweils 37 dazu addieren, wenn Sie sie dekodieren wollen. Und da müssen wir uns noch einigen, was machen wir, wenn wir über die obere Grenze hinauskommen, also wenn Ihre Buchstabe jetzt kodiert 98 war und Sie addieren 37 dazu. Nun unsere Konvention, die wir da immer verwenden werden, ist, dass wir entsprechend mit einem Overflow rechnen. Das heißt, wenn wir über die 99 hinauskommen, fangen wir wieder bei 0 an. Also das Ganze gemeint mit der Konvention. Wir werden es noch ganz sauber definieren, was das bedeutet, dass entsprechend 99 plus 1 wieder gleich 0 ist, 99 plus 2 gleich 1 ist und so weiter. Und was wir da machen bei dieser Konvention ist eigentlich eine Modulo-Rechnung. Denn wenn wir das normal durchgeführt hätten, also angenommen Sie haben die Zahl 98, wollen Sie kodieren, indem Sie 37 draufrechnen, dann sind Sie bei 135. Und jetzt würden Sie das machen, dass Sie ab 99 wieder mit der 0 angefangen hätten, dann würde da gerade 35 rauskommen. Das heißt, diese Overflow-Konvention, dass sobald Sie die obere Grenze verlassen, Sie entsprechend wieder mit 0 anfangen, heißt nichts anderes, als dass Sie normal rechnen und dann am Ende von Ihrer normalen Rechnung Modulo die Anzahl Ihrer Zeichen rechnen. Das entspricht gerade dem, dass Sie die 100 wieder mit 0 identifiziert haben. Einfach etwas drauf zu addieren ist zu einfach. Das kriegt der Angreifer schnell raus. Aber wir können natürlich andere Dinge probieren. Wir könnten probieren zu multiplizieren. Also wir könnten die Nachricht nehmen und jetzt nehmen wir die Nachricht als Zahl geschrieben und nehmen die mal 37. Das wird schon deutlich unsystematischer und Sie haben entsprechend auch mehr Overflows. Also wenn unsere Nachricht 17 ist, dann müssten wir entsprechend 17 mal 37 rechnen. Dann sobald wir die 100 überschreiten, fangen wir wieder bei 0 an oder andersrum, wir rechnen erst normal und rechnen dann Modulo 100. Auf die Art und Weise hätten Sie schon ein komplizierteres Kodierungsverfahren, was schon schwerer zurückzurechnen ist. Aber jetzt taucht auf einmal eine andere Frage auf, nämlich die Frage, können wir dieses mal 37, können wir das denn rückgängig machen? Also wenn der Empfänger das bekommt und kriegt jetzt irgendeine Zahl und wegen Overflow kriegt er jetzt zum Beispiel die Zahl 5 und er weiß, ich bin gestartet mit einer Zahl und die gab mal 37 und immer mit diesem Overflow gerechnet, kam am Ende 5 bei raus. Das heißt, ich weiß, ich habe diese Zahl und Modulo 100 ist die gleich 5. Was ist die Zahl geteilt durch 37? Das heißt, bei sowas ist die Frage, ist das überhaupt eine biaktive Funktion? Kann ich das überhaupt rückgängig machen? Das geht nicht immer. Stellen Sie sich vor, wir hätten zum Beispiel mal 5 gerechnet, dann würde die Zahl 20 mal 5, gäbe 100, also 0, 0 mal 5 gäbe 0, also 0 und 40 mal 5 gäbe 200, wäre auch gleich 0. Das heißt, mal 5 zu nehmen, könnten Sie mich rückgängig machen, weil Sie nicht wissen, mit welcher Ursprungszahl mal gestartet ist. Mit 37 würde es tatsächlich gehen. Wir werden sehen, es wird immer dann gehen, wenn die 100, also die Anzahl der Zeichen, die wir kodieren wollen und die Zahl, mit der wir multiplizieren, wenn die Teile erfremst werden, dann wird sich dieses Multiplizieren rückgängig machen lassen. Ja, multiplizieren ist noch nicht das, was man dann wirklich für die Kryptographie nimmt, weil auch das Multiplizieren ist noch zu systematisch. Sie können dieses geteilt durch, wenn wir die entsprechende Theorie haben, können Sie dieses geteilt durch relativ effizient berechnen. Das heißt, ein Angreifer, der ein paar Klartext und verschlüsselte Nachrichten dazu hat und da immer den Quotienten aus den beiden ermittelt, der findet ziemlich schnell diese 37 heraus, die wir als Schlüssel benutzt haben. Diese 37, also die Multiplikation, ist auch noch nicht das, was man für die Kryptographie nimmt. Und was man tatsächlich für die Kryptographie nimmt, ist, wir potenzieren. Das heißt, wir nehmen unsere Zahl, unsere Nachricht als Zahl geschrieben, dann nehmen wir diese Zahl hoch, zum Beispiel 37, da kommt eine irrsinnig große Zahl bei raus und diese irrsinnig große Zahl, die nehmen wir entsprechend modulo 100, was dementsprechend, dass wir immer die 100 überschritten haben, wir wieder mit 0 entsprechend losgehen, weil wir immer die 99 überschritten haben. Und diese Geschichte, dieses Potenzieren, das können Sie schwer systematisch feststellen. Also wenn Sie das haben, dann ist es sehr, sehr schwer, entsprechend die 37 zu kommen. Mehr noch, selbst wenn ich Ihnen die 37 geben würde, haben Sie es ganz, ganz schwer, aus der verschlüsselten Nachricht, die unverschlüsselten Nachricht zurückzurechnen. Das wird gerade dieses Geheimnis, dieses Public-Private-Key-Verfahren sein. Das heißt, die 37, die hier steht, die wird der Public-Key sein. Sie können mir eine Nachricht schicken, indem Sie eine Zahl nehmen, nehmen die hoch eine Potenz, die ich Ihnen gesagt habe, rechnen entsprechend mit dieser Overflow-Rechnung, geben mir das Endergebnis und ich bin in der Lage, dieses Endergebnis zurückzurechnen, also diese 37. Wurzel in diesen endlichen Mengen zu bilden, die diskrete 37. Wurzel zu rechnen, weil ich noch eine Zusatzinformation habe, die Ihnen fehlt. Und ohne diese Zusatzinformation können Sie dieses A hoch 37 nicht vernünftig zurückzurechnen, das heißt, Sie müssten alle Möglichkeiten durchprobieren, was letztlich, wenn Sie da groß genug Schlüssel haben, nicht mehr machbar ist. Und das wird gerade dieses Geheimnis, dieser Public-Private-Key-Verfahren sein, also der Möglichkeit, Nachrichten so zu verschlüsseln, dass ich einen Schlüssel öffentlich mache. Jeder kann mir Nachrichten verschlüsseln, aber nur ich kann die Nachrichten entsprechend entschlüsseln. Ja, und dafür müssen wir noch durch ein bisschen was an Theorie durch. Das erste, was wir uns überlegen müssen, wenn wir Nachrichten dadurch verschlüsseln werden, dass wir Potenzen nehmen von der Nachricht als Zahl geschrieben, dann müssten wir entsprechend diese Potenzen effizient mit dem Computer berechnen können. Und das kann man. Da gibt es eine ganz einfache Möglichkeit, die nennt man auch die sogenannte binäre Exponenziation, also die binäre Exponenziation, oder auf Englisch ein bisschen griffiger, square and multiply. Ja, angenommen Sie möchten so eine Zahl berechnen, noch machen wir noch nicht modulo, rechnen wir erstmal die Zahl ganz normal aus, also noch in der Menge der natürlichen Zahlen, die beliebig groß werden können. Und Sie möchten so eine Zahl a hoch n berechnen. Dann bedeutet das, Sie müssen a mal a mal a mal a und so weiter berechnen. Das heißt, Sie müssen n Produkte von Zahlen berechnen, oder genauer gesagt n minus 1 Produkte von Zahlen. Wir starten mit der ersten Zahl a und jetzt müssen wir es noch n minus 1 mal mit a multiplizieren. Das heißt, Sie müssen n minus 1 Produkte durchführen, um a hoch n zu berechnen. Jetzt kann man das Ganze aber leichter machen. Anstatt hier n minus 1 Produkte zu nehmen, kann ich das a hoch n auch dadurch berechnen, dass ich sage, ich berechne, wenn das n gerade ist, a hoch n halbe und nehme das Ganze nochmal mal a hoch n halber. Sie wissen, Potenzrechnungen a hoch n halbe mal a hoch n halbe gibt a hoch n halbe plus n halbe gibt also auch gleich a hoch n. Und wenn das n gerade ist, dann ist das n halber auch wieder eine ganze Zahl. Das heißt, dieses a hoch n halbe zu berechnen, das würde nur n halbe an Multiplikationen brauchen, n halbe minus 1, um ganz genau zu sein. Und dann haben Sie a hoch n halbe berechnet. Das andere a hoch n halbe ist natürlich der gleiche Wert, das müssen Sie nicht nochmal neu berechnen. Und dann haben Sie noch ein Produkt, um a hoch n halbe mal a hoch n halbe zu berechnen. Das heißt, dieser Ausdruck auf der rechten Seite, für den bräuchten Sie nur n halbe an Multiplikationen, während Sie für den Ausdruck auf der linken Seite n minus 1 an Multiplikationen brauchen. Das heißt, Sie sparen sich die Hälfte an Multiplikationen, wenn Sie das Ganze nicht einfach naiv das Produkt nehmen, sondern wenn Sie das Ganze in zwei Teile zerlegen, die beide gleich groß sind. Ja, das klappt nur für n gerade, aber das Ganze für n ungerade, da kriegen wir das natürlich auch leicht hin. Für n ungerade können wir ja sagen, da ist ja n minus 1 gerade. Also wenn ungerade ist, dann ist n minus 1 gerade. Das heißt, wir können n minus 1 durch zwei Teile, da kommt eine ganze Zahl raus. Also wir können a hoch n minus 1 halbe, dadurch berechnen, dass wir a ein paar Mal miteinander multiplizieren. Dann addieren, multiplizieren wir das, was rauskommt, nochmal dran. Also nochmal mal a hoch n minus 1 halbe, wenn wir das berechnet haben. Und wenn wir das miteinander malen nehmen, dann kommt a hoch n minus 1 raus, weil wir wollten aber a hoch n haben, also nehmen wir das Ganze nochmal a. Also das können wir machen für n ungerade. Und kriegen auf die Art und Weise, statt auf der linken Seite n minus 1 Multiplikationen zu brauchen, brauchen wir auf der rechten Seite nur n minus 1 halbe minus 1 Multiplikation für diese beiden Potenzen und dann noch zwei Multiplikationen für das linke a mal und das rechte mal a hoch n minus 1 halbe. Das sind also auch im Wesentlichen so was wie grob die Hälfte an Multiplikationen. Und das Schöne ist, um dieses a hoch n halbe zu berechnen, müssen Sie jetzt auch nicht diese n halbe Multiplikation durchführen, sondern da machen Sie wieder denselben Trick und berechnen ein a hoch n halbe entsprechend durch grob n Viertel Multiplikationen, berechnen a hoch n Viertel entsprechend durch grob n Achtel Multiplikationen. Das heißt auf die Art und Weise sparen Sie sich eine ganze Menge an Multiplikationen ein. Also ich schreibe Ihnen das mal so und berechne a hoch n halbe beziehungsweise a hoch n minus 1 halbe analog, ebenfalls wieder mit diesem Trick. Ja und wenn Sie das machen, dann sparen Sie sich wirklich eine Menge an Multiplikationen ein. Ich würde Ihnen das gerne einem Beispiel einfach vorführen. Wir haben, wenn wir Beispiel 2.19 wäre das dann angenommen, Sie möchten berechnen 2 hoch 20. Also um 2 hoch 20 klassisch auszurechnen, bräuchten Sie 19 Multiplikationen, 2 mal 2 mal 2 mal 2 und so weiter. Vielleicht einmal hin, 2 mal 2 und so weiter. Das heißt hier hätten wir das Ganze 20 mal. Das heißt wir brauchen 19 Multiplikationen, wenn wir es naiv rechnen. Was passiert, wenn wir es geschickter rechnen, also wenn wir es mit binärer Exponenziation oder das quernd Multiply berechnen, dann hätten wir entsprechend besser. Wir rechnen 2 hoch 20 mit der Formel von der letzten Folie. Also Formel von der letzten Folie haben Sie noch vor Augen, das Idee ist ja einfach, wenn die Zahl teilbar ist durch 2, dann zerteile ich das einfach in 2 Teile. Also 20 ist teilbar durch 2, das wäre 10. Das heißt 2 hoch 20 ist dasselbe wie 2 hoch 10 mal 2 hoch 10. Also müsste ich 2 hoch 10 ausrechnen, um 2 hoch 20 auszurechnen. Also rechnen wir 2 hoch 10 aus. 2 hoch 10 ist entsprechend, ja 10 ist auch durch 2 teilbar, also das ist 2 hoch 5 mal 2 hoch 5. 5 ist nicht durch 2 teilbar, aber das macht nichts, da muss ich halt nur eine 2 separat rausnehmen. 2 hoch 5 ist 2 mal 2 hoch 4. 4 ist durch 2 teilbar, also das ist 2 mal 2 hoch 2 mal 2 hoch 2. Ja und 2 hoch 2 ist 2 mal 2. Und jetzt gehe ich von unten nach oben und berechne alle vorkommenden Ausdrücke entsprechend. Also das heißt ich fange an 2 hoch 2 zu berechnen und kriege entsprechend raus. 2 hoch 2 brauche ich. 2 hoch 2 wäre 2 mal 2 ist 4. 2 hoch 5 wäre das nächste, was ich brauche. Ich habe es Ihnen hier eingeblendet, wenn Sie eine Zeile drüber gehen, das nächste, was Sie entsprechend brauchen würden, wäre 2 hoch 5. 2 hoch 5 hatten wir, ich habe es Ihnen noch eingeblendet, gesagt ist 2 mal 2 hoch 2 mal 2 hoch 2. Also dann 2 mal das Ergebnis, was ich eben berechnet habe, mal 4 mal 4, das gibt 32. 2 hoch 10 wäre gleich 2 hoch 5 mal 2 hoch 5, also 32 mal 32. Da hört so langsam das Kopfrechnen auf, 1024, das weiß man vielleicht noch mit 2 hoch 10. Und 2 hoch 20 wäre dann entsprechend 2 hoch 10 mal 2 hoch 10, müssten Sie also rechnen, 1024 mal 1024 ist grob eine Million. Ich habe es Ihnen hier ausgerechnet, 1048, 576. Ja und jetzt überlegen Sie sich nochmal 2 hoch 20, naiv berechnet, heißt der Computer muss 19 Multiplikationen, seinen Prozessor also mit 19 Multiplikationen beschäftigen. Wie viele Multiplikationen haben wir hier gebraucht für den Prozessor? Nun, wir haben hier oben eine Multiplikation, wir haben in der nächsten Zeile, haben wir 2 Multiplikationen, hier haben wir eine Multiplikation, hier haben wir eine Multiplikation. Das heißt insgesamt ist, um das Ganze zu berechnen, brauchen wir 1, 3, 4, 5 Multiplikationen. Das heißt anstelle von 19 Multiplikationen haben wir nur 5 Multiplikationen gebraucht. Und Sie sehen, umso höher Ihre Potenz ist, umso mehr spart Ihnen der Trick an Rechenaufwand. Das heißt Sie brauchen einfach weniger Multiplikationen und entsprechend weniger Prozessortakte, um das Ganze auszurechnen. Der Nachteil bei diesem Trick ist, dass unsere Zahlen immer größer werden, die davor kommen. Also die Zahl mit mal 2 zu rechnen ist, wenn Sie es im Kopf rechnen, ja, er war vielleicht sogar einfacher als 1024 mal 1024 zu rechnen. Das heißt das Ganze beruht darauf, dass der Prozessor eben auch mit großen Zahlen rechnen kann. Noch besser wird dieser Trick in dem Moment, wo Sie Modulorechnung betreiben. Das heißt in dem Moment, wo Sie zum Beispiel für die Verschlüsselung in endlichen Mengen rechnen und diese Oberflurregelung haben, dass Sie sagen, wann immer Sie die 99 zum Beispiel überqueren, fangen Sie wieder mit 0 an. Denn dann haben wir gesehen, dass dieses Modulorechnen, da gab es diesen unglaublich nützlichen Satz aus der letzten Vorlesung, diesem Modulorechnen ist es egal, ob Sie bei Summen oder Produkten erst Modulorechnen und danach die Summe bilden oder erst die Summe bilden, erst das Produkt bilden und dann die Modulorechnung durchführen. Und damit kann man extrem große Zahlen sehr, sehr effizient trotzdem handhaben, weil Sie durch dieses Modulorechnen die Zahlen immer wieder klein kriegen. Auch das würde ich Ihnen gerne an einem Beispiel direkt vorführen. Also angenommen Beispiel 2,20. Sie möchten, machen wir das ganze plakativ, Sie möchten die letzte Ziffer einer riesengroßen Zahl bestimmen. Also Beispiel 2,20. Wie lautet die letzte Ziffer? Von 123 hoch 125. Die Zahl ist so gewählt, dass Sie das ganze nicht mehr, also typischerweise auch nicht mehr mit Ihrem Computer, wenn Sie da einen Taschenrechner drin haben, das sprengt Ihnen üblicherweise die Grenzen von einem normalen Taschenrechner und einem Rechenprogramm, weil da bräuchten Sie schon ein Programm, das Ihnen erlaubt wirklich mit beliebig großen Zahlen zu rechnen, in dem sich das Programm entsprechend viel Speicher dynamisch allokiert. Ja, was haben wir, wie können wir das ganze berechnen? Also 123 hoch 25, 100 hoch 25 wäre entsprechend eine 1 mit 50 Nullen. Also da haben wir so etwas wie 50, 51, 52 Ziffern vielleicht in der Zahl. Wenn Sie das jetzt wirklich ausrechnen wollten, da halten Sie auch mit dem modernen Computer, halten Sie ein bisschen mit beschäftigt, um diese Zahl mit 52 Ziffern tatsächlich zu berechnen. Jetzt interessiert uns aber nur die letzte Ziffer. Wenn uns nur die letzte Ziffer interessiert, heißt das nichts anderes, als dass jedes Mal, wenn wir über die 10 kommen, wir wieder mit 0 loslaufen können. Das heißt, uns interessiert nur, was passiert. Also immer wenn wir über die 10 kommen, können wir die vorherigen Stellen vergessen. Uns interessiert nur die letzte Ziffer oder andersrum ausgedrückt, uns interessiert nur das Ergebnis von 123 hoch 25 modulo 10. Denn modulo 10 zu rechnen heißt ja gerade, dass Sie alle Vielfachen von 10 abziehen und dann nur noch die einer Stelle übrig bleibt, also nur noch die letzte Ziffer. Das heißt, was uns interessiert, ist 123 hoch 25 und das ganze modulo 10 auszurechnen. Und dieser Art von Ausdrücken ist genau das, was in der Kodierung auftritt. Sie rechnen für Ihre Kodierung, Sie kriegen Ihre Nachricht als Zahl. Diese Zahl lebt in so einer endlichen Menge. Sie rechnen mit dieser Overflow-Rechnung. Sobald Sie die obere Grenze überschritten haben, fangen Sie wieder bei 0 an. Das heißt, was Sie interessiert, sind die Zahlen immer nur modulo der Anzahl Ihrer Zeichen insgesamt. Und Sie möchten entsprechend kodieren, indem Sie hoch irgendeine Potenz nehmen und dabei diese Overflow-Rechnung durchführen. Das heißt, solche Arten von Ausdrücken sind genau das, was wir für die Kryptographie brauchen. Ja, was können wir da machen? Das erste, was wir machen können, ist 123 hoch 25. Heißt, wir rechnen 123 mal 123 mal 123 und das ganze 25 mal. Jetzt haben wir gesehen, weil immer wir ein Produkt haben und uns interessiert das Ergebnis modulo irgendeine Zahl, können wir auch die einzelnen Faktoren schon modulo der Zahl rechnen. Das heißt, 123 hoch 25 modulo 10 ist dasselbe, wie wenn wir die 123 schon modulo 10 gerechnet hätten. Mal 123 modulo 10 mal 123 modulo 10. Das heißt, 123 hoch 25 modulo 10 ist dasselbe, wie die 123 modulo 10 zu rechnen und das Ergebnis dann hoch 25 zu rechnen. Wenn ich das so aufschreibe, wird das immer ein bisschen sperrig, aber dafür schön. Das ist genau die Schreibweise, mit der man es implementieren kann. Ja, wenn ich das, was da rauskommt, also es ist egal, ob ich vorher modulo rechne oder danach modulo rechne, das gilt mit dieser kleinen Einschränkung, dass wenn ich vorher modulo rechne und dann eine Rechenoperation durchführe, dann kann es sein, dass ich meine obere Grenze wieder überschritten habe. Das heißt, das Ergebnis, was da rauskommt, das muss ich wieder darauf prüfen, ob ich die obere Grenze überschritten habe. Das muss ich also unter Umständen noch mal modulo 10 rechnen. Und das spart mir schon den ersten Rechenaufwand, denn das bedeutet, was hier rauskommt, 123 modulo 10 ist ja einfach gleich 3. Denn 123 ist 12 mal 10, also 123 geteilt durch 10 ist 12 rest 3. Also entsprechend, also die letzte Ziffer von 123 kommt raus, wenn ich 123 modulo 3 rechne. Das heißt, wir haben hier nur die 3 hoch 25 zu rechnen modulo 10 und jetzt sind wir in einem Bereich, das kriegt ihr Taschenrechner wahrscheinlich schon hin. Das heißt, das könnten Sie jetzt wahrscheinlich mit dem Taschenrechner oder mit Ihrem Computer kriegen Sie letzte Ziffer schon raus. Es ist aber tatsächlich so einfach, dass ich es Ihnen auch hiermit einfach mit Kopfrechnung vorführen kann. Denn jetzt können wir noch diesen Trick von das Square und Multiply oder dieser binären Exponenzation, den können wir jetzt noch zusätzlich mit dazu bringen. Also dieses 3 hoch 25 modulo 10, das berechnen wir jetzt mit dem Trick, dass wir nicht wirklich 3 mal 3 mal 3 mal 3 und so weiter rechnen, sondern wir rechnen das jetzt dadurch aus, dass wir sagen, das ist das gleiche wie, ich schreibe es erst hin und zwischendurch noch ein bisschen drin rum. Und das ist das gleiche wie zu sagen, mein 3 hoch 25, 25 ist nicht durch 2 teilbar, also schreibe ich mir das erstmal als 3 mal 3 hoch 24 modulo 10 und das 3 hoch 24, da benutze ich mein Square und Multiply Trick, das mache ich nicht durch 24 mal das Produkt zu nehmen, sondern 3 hoch 24 ist ja dasselbe wie 3 hoch 12 mal 3 hoch 12. Das heißt auf die Art und Weise habe ich nur 3 hoch 12 auszurechnen und noch zwei Produkte mehr. Und jetzt nutze ich noch, Sie haben eine Frage? An dieser Stelle hier, dieses hier, ja. Also die Idee ist, es ist egal, ob Sie erst modulo rechnen und dann das Produkt nehmen oder erst das Produkt nehmen und dann modulo rechnen. So kann man die Idee kurz ausrechnen. Wenn Sie es aber machen, stellen Sie fest, wenn Sie erst modulo rechnen, Sie rechnen dieses 3 hoch 25 aus, tippen das in den Taschenrechner ein, jetzt kommt irgendeine große Zahl raus. 3 hoch 25 weiß ich nicht, ist irgendwo in Millionen, Milliarden Bereich. Das heißt, was links steht, ist modulo 10 gerechnet, ist eine Zahl zwischen 0 und 9, was rechts steht, ist eine Zahl im Milliardenbereich. Das heißt, so einfach gilt die Formel nicht, denn wenn Sie zuerst modulo rechnen und dann die Rechenoperation durchführen, überschreiten Sie wieder die obere Grenze und haben sich nicht darum gekümmert, dass Sie die obere Grenze überschritten haben. Das heißt, Sie müssen dieses 3 hoch 25 auch so ausrechnen, dass Sie beim Überschreiten der oberen Grenze wieder mit 0 anfangen oder Sie rechnen es klassisch aus und rechnen am Ende nochmal modulo 10. Und deswegen sind diese Formeln in dem sperrigen Satz, die sind so ein bisschen sperrig, also das Produkt von zwei Zahlen modulo 10 ist wie 1. Zahl modulo 10 mal 2. Zahl modulo 10, so wäre schön, aber dann eben nochmal modulo 10, weil es könnte sein, dass dieses Produkt die 10 wieder überschritten hat. Deswegen müssen wir da dieses letzte modulo 10 immer noch mitführen. Es gibt andere Schreibweisen dafür. Ich werde Ihnen die noch in einer späteren Vorlesung zusammenfassen. Es gibt mehrere verschiedene Schreibweisen für diese Modulo-Rechnung. Eine davon, die hätte ich jetzt an der Stelle gerne, das mache ich trotzdem aus didaktischen Gründen, füge ich die hier noch nicht ein. Eine davon ist, einfach hinzuschreiben zwei Zahlen, ich mache ein Gleichheitszeichen zwischen die beiden Zahlen, wenn sie modulo 10 dasselbe sind. Dann spare ich mir dieses modulo 10 überall dazu zu schreiben. Der Vorteil von dieser Schreibweise, wo die das mod 10 immer all dazu schreiben, ist, dass sie sich das klar machen, dass man das durchführen muss. Und der andere Vorteil ist, dass sie es genauso auf die Art und Weise implementieren müssten. Das heißt, wenn Sie implementieren, dem Computer das ganze entsprechend eingeben und Sie möchten dieses 123 hoch 25 mod 10 berechnen, dann müssten Sie es dadurch machen, dass Sie die Subroutine, also dass Sie 3 hoch 25 mod 10 rechnen. Das heißt, das müssten Sie tatsächlich in der Form eingeben und müssten immer wieder die Modulo am Ende auch nochmal machen. Ja, also wie gesagt, 3 hoch 25 würden wir dann aber auch nicht. Das können wir schon mit dem Taschenrechner ausrechnen, aber auch da zeige ich Ihnen noch, wie das der Computer ganz effizient machen kann. Der kann es nämlich erstmal zerlegen in 3 mal 3 hoch 12 mal 3 hoch 12 mod 10 und das heißt, wir müssten jetzt nur 3 hoch 12 ausrechnen und auch da können wir wieder den Trick anwenden. Wir möchten am Ende das Ergebnis nur modulo 10, das heißt, die ganzen Zwischenergebnisse, die wir brauchen, die müssten wir auch immer nur modulo 10 betrachten. Das heißt, wir rechnen nicht 3 hoch 12 aus, sondern wir rechnen 3 hoch 12 modulo 10 aus. Also anstatt 3 hoch 12 mal 3 hoch 12 mal 3 zu nehmen und dann modulo 10 zu rechnen, können wir auch 3 modulo 10 rechnen. Können wir uns sparen, gibt einfach 3 mal 3 hoch 12 modulo 10 mal 3 hoch 12 modulo 10 und dann am Ende wieder modulo 10 und es könnte ja sein, dass unsere Zwischenrechnung wieder die 10 überschritten hat. Also das heißt, was wir rechnen ist nicht 3 mal 3 hoch 12 mal 3 hoch 12, sondern wir rechnen 3 mal 3 hoch 12 modulo 10 mal 3 hoch 12 modulo 10 und dann wieder aus dem gleichen Grund wie eben das Endergebnis auch wieder modulo 10, denn es kann ja sein, dass wir die 10 bei diesen Zwischenrechnungen überschritten haben. Also müssen wir 3 hoch 12 modulo 10 ausrechnen. Selber Trick wie davor, 3 hoch 12 schreiben wir uns als 3 hoch 6 mal 3 hoch 6 und die 3 hoch 6 mal 3 hoch 6 modulo 10 rechnen wir dadurch aus, dass wir die 3 hoch 6 modulo 10 rechnen mal 3 hoch 6 modulo 10 rechnen. Und jetzt kann es sein, dass wir bei diesem letzten Produkt die 10 überschritten haben, dann müssten wir entsprechend wieder die bei 0 anfangen, also auch da das Endergebnis auch wieder modulo 10. Die 3 hoch 6 modulo 10, gleiches Prinzip, 3 hoch 6 modulo 10 wäre 3 hoch 3 modulo 10 mal 3 hoch 3 modulo 10 und das ganze wieder modulo 10. Und die 3 hoch 3, das kam jetzt schon fast im Kopf, gibt es 27, machen wir es trotzdem noch einmal systematisch, 3 hoch 3 modulo 10 wäre 3 mal 3 hoch 2 und 3 hoch 2 wäre 3 mal 3, also das wäre entsprechend jetzt 3 mal 3 mal 3, bei denen ändert das nichts mehr, wenn ich die 3 mod 10 rechne, also spare ich mir da das mod 10 hinzu zu schreiben und schreibe das gleich dahinter als mod 10. Und jetzt kann ich das aber entsprechend leicht ausrechnen. Jetzt können wir es entsprechend leicht ausrechnen, denn jetzt können wir wieder von unten nach oben das ganze durchrechnen und dadurch, dass wir jetzt alles modulo 10 betrachten, werden unsere Zahlen auch nicht so furchtbar groß, das heißt wir haben wenig Produkte aus diesem ganz kleinen Moment, wir haben mal die Plattrate und wir haben auch noch kleine Zahlen durch diese modulo 10 Geschichte. Sie haben noch eine Frage? Das habe ich nicht verstanden, können Sie nochmal wiederholen? Ja, ich habe jetzt sie beobachtet dominatingos modulo. Also die erste 3, die da steht, die kommt daher, dass wir die 25 nicht einfach in zwei Teile aufteilen können. Das heißt, Sie können natürlich sagen, 3 hoch 25 ist 3 hoch 12,5 mal 3 hoch 12,5, aber hoch 12,5 zu berechnen heißt, Wurzeln zu bilden. Und das wollen wir nicht. Da kommen Kommastellen mit rein, wir wollen hier ganz zahlrechnen und das macht dem Computer auch Aufwand. Das heißt, wir machen diese Potenz erstmal gerade und sorgen dafür, dass wir aus der ungraden 25 eine gerade Zahl bekommen, nämlich die 24. Das heißt, wir schreiben uns 3 hoch 25 als 3 mal 3 hoch 24 und dann können wir nämlich diesen Trick machen, die 24 zu halbieren, ist 3 mal 3 hoch 12 mal 3 hoch 12. Wenn Sie jetzt entsprechend 17 hoch 25 hätten, dann würden Sie erst schreiben 17 mal 17 hoch 24 und dann hätten Sie entsprechend 17 mal 17 hoch 12 mal 17 hoch 12. Hat das die Frage beantwortet? Hab ich die richtig verstanden? Ja, Sie müssten alle drei Teile mod 10 rechnen. Sie dürfen alle drei Teile mod 10 rechnen. So rum ist es sogar richtiger. Weil dadurch, dass Sie am Ende noch mal mod 10 rechnen, ist es egal, ob Sie die einzelnen Teile mod 10 gerechnet haben oder nicht. Also Sie haben das Produkt von Zahlen, Sie können die Faktoren vorher mod 10 rechnen, Sie können die nachher mod 10 rechnen. Also den Satz ganz genau ausgedrückt wäre, es ist egal, ob Sie die Faktoren zwischen durch schon mod 10 gerechnet haben oder erst ganz am Ende. Und an der Stelle, diese erste 3, die da steht, die ist 3 mod 10 halt eben auch gleich 3. Jetzt verstehe ich auch Ihre Frage. Wenn da eine 12 stehen würde, dann wäre es so wohlrich, also wenn sie da stehen würde, 12 hoch 25. Hätten Sie 12 mal 12 hoch 12 mal 12 hoch 12, wäre 12 mod 10 mal 12 hoch 12 mod 10 mal 12 hoch 12 mod 10 und das Ganze wieder mod 10. Sie dürften zwischendurch das mod 10 aber auch wieder weglassen. Also Sie würden es machen, weil es Ihnen Arbeit spart, aber Sie müssten es nicht machen, mathematisch kommt bei beiden das gleiche aus. Ja, also die Geschichten können wir jetzt leicht ausrechnen. Jetzt fangen wir das Ganze von unten nach oben an, also entsprechend 3 hoch 3 mod 10, das wäre gleich. Ja, die 3 hoch 3, 3 mal 3 gibt 9, noch einmal 3 entsprechend 27, wäre 27 mod 10. 10 wäre also gleich 7. Dann habe ich entsprechend 3 hoch 6 mod 10. Ich habe es Ihnen hier eingeblendet, 3 hoch 6 mod 10 war 3 hoch 3 mal 3 hoch 3, jeweils mod 10 genommen, dann wieder mod 10. Das heißt für die 3 hoch 3, die davor kommt, kann ich jetzt einfach die 7 einsetzen, denn ich durfte ja die 3 hoch 3 mod 10 einsetzen. Das heißt, das wäre jetzt einfach 7 mal 7 mod 10, 7 mal 7 ist 49 und das ganze mod 10 gibt also gleich 9. Dann entsprechend 3 hoch 12 mod 10, gibt die 3 hoch 6 mal 3 hoch 6 und das mod 10, aber wie wir gesehen haben, darf ich gleich 3 hoch 6 mod 10 mal 3 hoch 6 mod 10 rechnen. Das heißt für die 3 hoch 12 muss ich nur 9 mal 9 rechnen. Dann haben wir also 81 mod 10 ist 1 und das letzte wäre dann entsprechend 3 hoch 25 mod 10, wäre gleich 3 mal 3 hoch 12 mal 3 hoch 12, jeweils mod 10 gerechnet, also 3 mal 3 hoch 12 war 1, 3 hoch 12 war 1 und das ganze mod 10 gibt also 3 mod 10, gibt also 3 mod 10, also gleich 3. Und das bedeutet also, dass die letzte Ziffer von meiner Zahl, 123 hoch 25, also letzte Ziffer von 123 hoch 25 ist eine 3. Also auf die Art und Weise haben Sie einen Zaubertrick, um mit Zahlen umzurechnen. Das heißt, Sie können von Zahlen die letzten Ziffern ausrechnen, also letztlich mit kleinem 1 mal 1 können wir die letzten Ziffer von einer Zahl ausrechnen, die so groß ist, dass Sie die mit dem Computer, mit dem Taschenrechner nicht mehr berechnen bekommen. So ist es natürlich, so ist es ein Zaubertrick oder ein mathematischer Gag, aber es ist genau das, was wir brauchen für die Kryptographie, denn die Tatsache, dass wir damit so einfach rechnen können mit diesen kleinen Zahlen, heißt, wenn Sie große Zahlen haben, Sie wollen natürlich große Schlüssellänge haben, Sie wollen große Nachrichtenstücke entsprechend kodieren. Das heißt, im Computer kommen, wenn Sie Kryptographie machen, kommen sehr, sehr große Zahlen raus und diese sehr, sehr großen Zahlen nehmen Sie dann auch hoch irgendwelche großen Potenzen und trotzdem kann Ihr Computer das ganz, ganz effizient berechnen, dadurch, dass er aus dieser hohen Potenz, die entsprechend viel weniger Multiplikationen braucht, als in dieser Potenzzahl drin steht, mit dieser Square und Multiplier Idee und dadurch, dass die Zahlen nie mit gewisser Größe überschreiten, dadurch, dass er einfach ständig modulo rechnen kann. Also wenn Sie modulo 10 rechnen, dann überschreiten Sie nie das kleine 1 mal 1, weil nie Zahlen größer als 9 auftauchen, entsprechend, wenn Sie modulo 10 Milliarden rechnen, dann tauchen nie Zahlen auf, die größer sind als 10 Milliarden. Ja, also das ist eine wunderbare Geschichte und das wird letztlich die Idee sein, wie unser Algorithmus in der Lage ist, überhaupt die Kryptographie, die Verschlussung durchzuführen, also wie wir diese Potenzen mit dieser modulo Rechnung überhaupt ausrechnen können. Was damit natürlich noch komplett offen ist, ist, wie man das Ganze wieder zurückrechnen kann. Also auf die Art und Weise haben Sie etwas, das können Sie leicht ausrechnen, aber wie kommen wir wieder zurück? Also wenn ich diese Zahl bekommen habe, irgendwie 123 hoch 25 mod 10, ich habe jetzt fangen wir mit der 3 an, 3 hoch 25 angenommen, meine Nachrichten sind die Zahlen von 0 bis 9, jemand hat eine 3 kodieren wollen und hat die hoch 25 genommen, jetzt kommt hier dummerweise gerade 3 mit raus, ist also eine schlechte Kodierung gewesen, also angenommen, jemand hat die Zahl 7 genommen, nimmt die entsprechend hoch 48 und dann kommt 3 raus, dann wäre also 3 meine kodierte Zahl für die 7. Aber wir müssen dabei natürlich noch sicherstellen, dass nicht die gleiche Zahl wieder rauskommt, was in dem Fall hier tatsächlich sonst der Fall wäre und wir müssen sicherstellen, dass der Empfänger auch die ursprüngliche Zahl wieder zurückrechnen kann und jemand anderes soll diese Zahl aber nicht zurückrechnen können. Und dieses Geheimnis, dass eben jemand anderes kann meine Zahl kodieren, man kann meine Nachricht kodieren, aber nur ich kann die Nachricht zurückrechnen, das haben Sie sicherlich alle schon mal gehört, hat was zu tun mit der Primfaktorzerlegung, das heißt, mit der Tatsache, der Empfänger kennt die Primfaktorzerlegung einer großen Zahl und jemand, der unberechtigt ist, der kennt diese Primfaktorzerlegung entsprechend nicht. Und warum die uns dabei hilft, ja dafür müssen wir sie erstmal einführen, also nächster Abschnitt 222, die Primfaktorzerlegung. Sie kennen alle den Begriff der Primzahl, ich möchte Ihnen den trotzdem nochmal sauber definieren, wie wir den hier in der Vorlesung gebrauchen, Definition 221. Eine Primzahl ist eine Zahl, die nur durch 1 und sich selbst teilbar ist, das wäre so die aller Welts Definition von Primzahl, worauf man immer achten muss, ist, ob man zulässt, dass die 1 auch selber eine Primzahl sein soll oder nicht. Die übliche Konvention ist, dass die 1 keine Primzahl sein darf, also eine Primzahl ist eine Zahl, die erstmal eine natürliche Zahl ist, aber nicht die 1, also 1 ist keine Primzahl. Also nur die, die als Teiler nur sich selbst und die 1 hat, das heißt, die nur die trivialen Teiler besitzt. Also die nur die trivialen Teiler 1 und a besitzt. So würden wir das üblicherweise hinschreiben, also 7 ist eine Primzahl, denn 7 ist nur durch 7 und durch 1 teilbar und durch keine andere Zahl außer 1 und 7. Jetzt haben wir hier bei der Teilbarkeit, die haben wir so eingeführt, dass wir auch negative Zahlen mit berücksichtigt haben. Das heißt, dadurch, dass wir unsere Nachrichten codieren wollen, da kann es uns die Modulo-Rechnung brauchen, da kann es nicht nur sein, dass wir die 10 überschreiten und entsprechend wieder bei der Null anfangen, es kann auch sein, dass wir bei den Rechnungen die Null unterschreiten, das heißt, dann kommen wir ins Negative hinein und kommen entsprechend auch dann, das heißt, wenn wir die Null unterschreiten, laufen wir ab der oberen Grenze wieder los. Das heißt, bei uns können auch immer negative Zahlen in diesen Zwischenrechnungen auftauchen, entsprechend schleppen wir bei der Teilbarkeit auch immer die negativen Zahlen mit, das heißt, bei uns sind Teile einer Zahl, sind eben nicht nur positive Zahlen, sondern sind auch negative Zahlen. Das heißt, bei uns in der Vorlesung für diese Zwecke der Kryptographie ist die 7 eben nicht nur durch die 7 und die 1 teilbar, sondern die 7 ist auch teilbar durch minus 1, denn auch da gibt es eine ganze Zahl, nämlich minus 7 mal minus 1, was 7 ergibt und die 7 ist auch teilbar durch minus 7. Das heißt, unsere trivialen Teile sind nicht nur die Zahl selber und die 1, sondern minus 1 und minus a sind auch eben entsprechend, immer nach unserer Definition von Teile. Die Teile der Zahl entsprechend ist bei uns eine Primzahl, die nur diese vier Teile besitzt, nämlich die normalen positiven Teile und die entsprechenden Legationen dazu. Ja, und beachten Sie, wie üblich, a ist aus n ohne die 1 sein, also die 1 ist keine Primzahl, der Hintergrund ist, wenn Sie eine Primfaktorzerlegung haben, ein Produkt von Primzahlen, wenn Sie die 1 als Primzahl zulassen, dann könnten wir so viele Mal 1, wie Sie wollen, reinschreiben, damit die Primfaktorzerlegung nicht mehr eindeutig sein. Ja, Stichwort Primfaktorzerlegung, das möchte ich Ihnen, das machen wir vor der Pause noch. Sie können, das kennen Sie wahrscheinlich auch schon, Sie können jede Zahl in Primzahlen zerlegen. Das heißt, Sie können, wenn Sie irgendeine Zahl haben, 12, dann können Sie so lange, können Sie das Ganze entsprechend als Produkt von Zahlen schreiben, 12 ist 2 mal 6 und jede Zahl in dem Produkt ist entweder wieder eine Primzahl, dann können Sie die nicht weiter zerlegen oder wenn sie keine Primzahl ist, dann hat sie einen Teiler und dann können Sie die entsprechend wieder in Teile zerlegen. Also 12 ist 2 mal 6, 6 ist 2 mal 3, also ist die 12 gleich 2 mal 2 mal 3. Jetzt haben wir nur noch Primzahlen, 2 und 3 sind Primzahlen, die können wir nicht noch weiter zerlegen. Das heißt, wenn Sie so wollen, sind die Primzahlen die Grundbausteine der Zahlen. Und tatsächlich ist es historisch so, dass vieles, was wir über Primzahlen wissen, kommt noch von den alten Griechen und also zumindest ist mir kein wirklich praktischer Anwendungszweck bekannt, warum die alten Griechen sich jetzt wirklich für Primzahlen interessiert haben. Damit kann man keine besseren Brücken bauen, wenn man das entsprechen kann. Sondern bei den Griechen, bei den alten Griechen war die Mathematik noch viel, viel enger verband mit der Philosophie und das heißt, für die alten Griechen waren tatsächlich die Primzahlen, waren die Elementarbausteine der Mathematik, die Elementarbausteine der Mathematik an sich, weil man eben jede Zahl in diese Primzahlen zerlegen kann, so wie die Atome auch ein griechisches Wort, das bekannten die natürlich noch nicht, aber die haben postuliert, dass man eben auch entsprechend die Materie in sehr kleine Einheiten zerlegen kann und letztlich die Materie immer aus denselben kleinen Einheiten zusammengesetzt ist. Und so sind es in der Mathematik, sind die Atome unsere Elementarbausteine, sind da entsprechend die Primzahlen. Und dass das geht, das war wie gesagt schon in Griechen bekannt, Satz 222, das ist die sogenannte Primfaktor-Zerlegung, sie können nämlich jede Zahl in Primfaktoren zerlegen, also das heißt, sie können jede Zahl als Produkt von Primzahlen schreiben, also für jede Zahl, für jedes kleine a, jede natürliche Zahl außer der 1, existieren endlich viele Primzahlen, also p1, p2 und so weiter bis pn in n, pj Primzahl, für alle j gleich 1 bis n, so das gilt. Und dann, damit ich mit dem Skript übereinstimme, wir nehmen die Anzahl der Zahlen, nehmen wir also pj Primzahl für alle j gleich 1 bis n, ja, so das entsprechend gilt, mein a ist ein Produkt aus diesen endlich vielen Primzahlen, also a ist p1 mal p2 mal und so weiter bis pn, entsprechend 12 ist 2 mal 6, ist 2 mal 2 mal 3, 24 wäre 2 mal 12, wäre also 2 mal 2 mal 2 mal 3 und so weiter. Ja, das Ganze möchte ich Ihnen gerne beweisen, ach vielleicht vorher noch, viele von Ihnen sind im ersten Semester noch kurz zur Notation, wenn ich hier schreibe für alle j gleich 1 bis m, dann ist das so eine mathematische Unsauberkeit, wenn eigentlich möchte ich gerne sagen, es gilt für alle j zwischen 1 und m, das heißt, diese Zahlen von 1 bis m, das ist eigentlich eine Menge und eigentlich müsste ich an der Stelle hier schreiben für alle j Element von den Zahlen 1 bis m, jetzt ist dieses Element von der Mengenklammer zu schreiben, dauert länger, das heißt und an der Stelle ist es einfach, also ist relativ klar, was damit gemeint ist, das heißt an der Stelle nimmt man so eine, ja auch in der Mathematik so eine Informatikanotation, so wie Sie sagen würden, vor j gleich 1 bis 5, so würden Sie entsprechend auch in der Mathematik, wenn Sie einfach nur sagen wollen, irgendwas gilt für alle Zahlen von hier bis da, ist es auch üblich zu schreiben, alles, das gilt für alle j gleich 1 bis m, ist also mathematisch unsauber, eigentlich wäre das mathematisch ein Element von der Menge 1 bis m, aber durchaus üblich und das schreibt sich einfach schneller, von daher und ich möchte Sie auch ein bisschen in diese Notation gewöhnen, werde ich auch entsprechend diese Notation verwenden. Ja, wie beweisen wir das Ganze, das möchte ich Ihnen tatsächlich gerne vorführen, also wie kann man beweisen, dass man jede Zahl in diese Elementarbausteine, in diese Primzahlen zerlegen kann und der Beweis ist erstmal relativ intuitiv, denn wenn Sie sagen, Sie haben irgendeine Zahl, ja entweder ist es selber eine Primzahl, dann ist es auch ein Produkt aus Primzahlen, nämlich einfach nur sich selbst oder es ist keine Primzahl, wenn es keine Primzahl ist, dann hat es irgendwelche Teile und dann können Sie es entsprechend als ein Produkt schreiben und diese Teile selber, ja entweder sind Primzahlen oder Sie können die wieder zerlegen, das heißt auf die Art und Weise ist es intuitiv recht klar, Sie werden irgendwann immer, also irgendwann werden Sie nur noch bei Primzahlen rauskommen, weil solange Sie keine Primzahl haben, haben Sie wieder Teile und Sie werden dabei immer kleiner, also das kann nicht irgendwie beliebig weitergehen. Wie kriegt man sowas wirklich in einen ganz harten, rigorosen mathematischen Beweis, mit dem man wirklich seine Hand ins Feuer legen kann? Und da hilft uns dieses Prinzip des kleinsten Verbrechers weiter, denn unsere Idee ist ja, wir kriegen die Primzahlerlegung von einer Zahl, ja entweder es ist eine Primzahl, dann sind wir fertig, wenn es keine Primzahler ist, dann können wir entsprechend Teile davon, das heißt wir kriegen unser Problem zurückgeführt auf kleinere Zahlen und daraus kriegen wir einen sauberen mathematischen Beweis hin, dass es eben immer klappte, eine Primfaktorzerlegung hinzuschreiben, das kriegen wir dadurch hin, dass wir diesen Prinzip des kleinsten Verbrechers nehmen, das heißt wir sagen, wenn das nicht gehen würde, also angenommen es gäbe Zahlen, die keine Primfaktorzerlegung besitzen, dann müsste es unter all diesen Zahlen, die keine Primfaktorzerlegung gäbe, müsste es ja eine kleinste geben und dann nehme ich mir diese kleinste Zahl, und diese kleinste Zahl, die hat, ist entweder eine Primzahl, das kann nicht sein, dann hätte es ja eine Primfaktorzerlegung oder aber, sie ist keine Primzahl, dann hat sie aber Teile und diese Teile selber, die sind ja dann noch kleiner und da ich mit der kleinsten Zahl gestartet bin, die keine Primfaktorzerlegung besitzen, müssen die Teile entsprechend Primfaktorzerlegung haben, das heißt die Teile haben eine Primfaktorzerlegung und dann muss ich die nur entsprechend kombinieren und kriege eine Primfaktorzerlegung der größten Zahl raus. Das möchte ich Ihnen gerne einmal ganz sauber aufschreiben, für als Beispiel für diese sauberen Beweise letztlich, Sie könnten es auch über eine vollständige Inuktion formulieren, aber gerade bei dem Beweis ist dieses Prinzip des kleinsten Verbrechers, ist da sehr viel suggestiver und ganz nahe auch dran an unserer Intuition. Also angenommen, das Ganze ist also erstmal ein Widerspruchsbeweis, angenommen der Satz gilt nicht und ich zeige unter dieser Annahme, dass ein Widerspruch kommt, deswegen muss meine Annahme falsch sein, also muss der Satz doch gelten. Also Beweis, Annahme, es gäbe Zahlen, also ich möchte gern beweisen, jede Zahl hat eine Primfaktorzerlegung, also das Gegenteil wäre, es gibt Zahlen, Gegenteil von für alle, es existiert ein Gegenbeispiel, das heißt es existiert ein Gegenbeispiel, es existieren Zahlen, eine oder mehrere, die keine Primfaktorzerlegung besitzen. Jetzt nehmen wir uns das Prinzip des kleinsten Verbrechers, was letztlich darauf beruht, dass jede Teilmenge der natürlichen Zahlen eine kleinste Zahl besitzt, also die Zahlen, die keine Primfaktorzerlegung besitzen, sind eine Teilmenge der natürlichen Zahlen, dann muss es eine kleinste davon geben. Also dann existiert, das Prinzip des kleinsten Verbrechers, dann existiert kleinste solche Zahl, nennen wir die a, das heißt wir hätten eine natürliche Zahl außer 1 und diese natürliche Zahl außer 1 hätte keine Primfaktorzerlegung. Ja und jetzt machen wir genau diesen intuitiven Beweis, wir machen eine Fallunterscheidung, a ist entweder selber eine Primzahl oder keine Primzahl. Also erster Fall a Primzahl, ja dann hat a eine Primfaktorzerlegung, nämlich sich selber a, ich kann ja auch das Produkt aus einer einer Zahl haben, also a Primzahl kann nicht sein, dann hätte a Primzahl, dann hat a. Primfaktorzerlegung. Also wenn meine Annahme nicht wahr ist, dann gibt es einen kleinsten Verbrecher, eine kleinste Zahl, die man nicht zerlegen kann, die kann dann aber nicht selber eine Primzahl sein, sonst könnte ich sie zerlegen, das wäre ja gerade einfach. Die einzelne Zahl ist ja auch eine Primfaktorzerlegung für sich selber, wenn sie eine Primzahl ist. Also zweiter Fall kann nur sein, a keine Primzahl. Wenn a keine Primzahl ist, haben wir gerade definiert, eine Primzahl hat nur die trivialen Teile 1a, –1, –a, eine Nicht-Primzahl hat also noch andere Teile, das heißt es gibt eine Zahl außer 1 und a selber, dann nehmen wir gleich einen positiven Bereich, es gibt eine positive Zahl außer 1 und a, die mein a teilt, das heißt es existiert ein b, natürliche Zahl, sodass b teilt a. Und b teilt a bedeutet, es existiert irgendein q, sodass q mal b gleich a ist, also ein vielfaches q von b wäre gleich a. Ja und mehr noch, wir wissen, wir haben nicht nur die trivialen Teile, das heißt dieses b existiert nicht nur als natürliche Zahl, sondern es existiert ein b, was ungleich 1 ist und diese Eigenschaft erfüllt. Und dieses b ist außerdem ungleich a, denn b gleich 1 und b gleich a wären ja die trivialen Teile, das heißt wenn wir keine Primzahl sind, dann haben wir eine Zahl, die ist nicht die Zahl selber, die ist nicht 1 und die ist ein Teiler davon. Ja, das heißt aber, mein q ist aus n, mein q kann dann also auch nicht 1 sein, denn wenn q gleich 1 wäre, dann wäre 1 mal b gleich a, dann wäre b ja gleich a. Das heißt mein q, was ich hier habe, das kann auch nicht gleich 1 sein. Und selbes Argument, dadurch dass das b nicht 1 ist, kann q auch nicht a sein, denn sonst hätten wir entsprechend auf der linken Seite a mal 1 gleich a stehen. Also q ist auch nicht gleich 1 und q ist auch nicht gleich a. Und mehr noch, Sie wissen auch, keiner der beiden Zahlen kann größer sein als a, denn in diesem Produkt q mal b wird ja mindestens mit 2 multipliziert. Wenn Sie mit einer Zahl starten, die größer ist als a, nehmen die mal 2, dann ist die ja noch viel größer als a. Das heißt, was Sie außerdem wissen ist, dass b kann auch nicht größer sein als a, das heißt also, dass b liegt echt zwischen 1 und a und dasselbe gilt für das q, das q muss ebenfalls zwischen 1 und a liegen. Das heißt, wenn Sie eine Zahl haben, die keine Primzahl ist, dann müssen Sie die zerlegen können, ein Produkt aus zwei Zahlen, die echt kleiner sind als diese Zahl. Ja, und jetzt sind die echt kleiner und jetzt hilft uns eben dieses Prinzip des kleinsten Verbrechers, das finde ich in dieser möglichen Endlosschleife landen, wir zerlegen, wir zerlegen weiter, wenn wir noch nicht fertig sind, zerlegen wir nochmal weiter. Mit diesem Prinzip des kleinsten Verbrechers können wir das ganze logisch durchbrechen. Wir sind schon gestartet mit der kleinstmöglichen Zahl, die keine Zerlegung hat. b und q sind kleiner als unser kleinstes Gegenbeispiel, das heißt b und q können selber kein Gegenbeispiel sein, das heißt b und q müssen eine Primfaktorzerlegung besitzen, denn sie sind kleiner als a und a ist die kleinste Zahl, die keine Primfaktorzerlegung besitzt. Also das heißt b und q, die beiden besitzen eine Primfaktorzerlegung. Also a war kleinstmöglich, kleinstmögliches Gegenbeispiel, ich schreibe das mal so, kleinstmöglicher Verbrecher, kleinstmögliches Gegenbeispiel und daraus folgt, dass unser b und q, die sind noch kleiner, die können also keine Verbrecher gewesen sein, das heißt b und q besitzen Primfaktorzerlegung. Ja und jetzt muss ich einfach nur die Primfaktorzerlegung von b und q miteinander kombinieren, machen wir auch das noch in Formeln, also das heißt es existieren Primzahlen, die miteinander multipliziert das b ergeben, p ist schon weg, so sollen die Primzahlen für das a heißen, q ist schon weg, so habe ich das ein Vielfaches genannt, also nenne ich die Primzahlen, die b zusammen ergeben, dann nenne ich die r. Also es gibt r1 bis irgendeine Anzahl rl, kann man sagen es existieren r1, r2 und so weiter bis rl Primzahlen mit entsprechend b gleich r1 mal r2 mal rl und es existieren nenne ich die r Schlange, r1 Schlange, r2 Schlange und so weiter, irgendeine andere Anzahl r Schlange mit k Primzahlen, sodass q gleich r1 Schlange, r2 Schlange und so weiter bis rk Schlange ist. Ja und das bedeutet jetzt aber, dass mein a was ich hier habe, das ist ja gleich b mal q gewesen und b mal q ist jetzt also r1 mal r2 und so weiter bis rl und das q war r1 Schlange r2 Schlange und so weiter bis rk Schlange und das bedeutet, was ich hier gefunden habe, ist eine Primfaktor Zerlegung. Das heißt also ich habe gezeigt, mein kleinster Verbrecher kann gar kein Verbrecher sein, mein kleinstes Gegenbeispiel zu dem Satz ist doch kein Gegenbeispiel, das heißt es gibt überhaupt kein Gegenbeispiel, weil es gibt kein kleinstes Gegenbeispiel, also haben wir hier doch auch wieder den Widerspruch, das heißt die Annahme, dass es überhaupt Beispiele gibt, die keine Primfaktor Zerlegung existieren, die kann entsprechend nicht wahr sein. Ja und das heißt wir können tatsächlich jede Zahl in so eine Primfaktor Zerlegung zerlegen, das heißt wir können das ausrechnen, für die alten Griechen bedeutet das die Elementarbausteine der Mathematik und der Zahl, für die Kryptographie ist das spannende an der Geschichte, dass diese Primfaktor Zerlegung zu berechnen ganz furchtbar aufwendig ist, das heißt diese Primfaktor Zerlegung zu berechnen dafür ist grob gesagt kein effizienter Algorithmus bekannt, der besser ist, als einfach alle Zahlen auszuprobieren. Also sie können sich natürlich die Zahl selber nehmen und jetzt müssen sie Teile davon finden. Bei einer Zahl wie 12 ist das einfacher, wenn die gerade ist sehe ich natürlich gleich, das ist eine 2, aber angenommen ich habe jetzt eine Zahl wie 137 und frage sie was da die Teile von 137 sind oder von 2813, dann wird es ihnen schwer fallen die Teile von 2813 auszurechnen. Also es gibt so ein paar Tricks mit irgendwie Quersumme durch 3 teilbar, dann ist die Zahl durch 3 teilbar, hinten 5 oder 0, dann ist sie durch 5 teilbar, gerade sehen sie sofort, aber wenn es nichts von diesen Dingen erfüllt, dann werden sie schwer haben einen Teiler zu finden. Und was sie dafür machen müssten um einen Teiler zu finden ist letztlich ja fast alle Zahlen durchzuprobieren. Es stimmt nicht ganz mit dem alle Zahlen durchzuprobieren, weil sie müssten nur bis zur Wurzel von der Zahl gehen, dadurch dass die Primfaktoren die können nicht größer sein als die Wurzel der Zahl, denn wenn noch ein weiterer Primfaktor kommt, die beiden größten Primfaktoren, die wären entsprechend beide, wenn die beide die Wurzel von der Zahl wären, dann hätten sie schon die Größe von der Zahl erreicht, das heißt die Primfaktoren können nie größer werden als die Wurzel von der Zahl und sie können natürlich alle geraden Zahlen auslassen, wenn sie wissen die Zahl ist selber nicht gerade, dann hat sie keine geraden Teile. Entsprechend solche Dinge können sie ein paar Zahlen, können sie weglassen bei dem Ausprobieren, aber von dem Aufwand her, den sie machen müssen, ist es grob immer noch derselbe, wie wenn sie einfach alle Zahlen durchprobieren müssten um die ganzen Teile zu bestimmen. Und das kann irrsinnig aufwendig werden, also wenn sie jetzt an eine Zahl denken, die nicht 1000 ist, sondern an eine Zahl denken, die irgendwo in Milliarden, in Billionen, in 10 hoch 20, in 10 hoch 30 Bereich liegt, dann können sie diese Zahl ja alle Zahlen auszuprobieren und entsprechend dadurch zu teilen, macht ihnen einen irrsinnigen Aufwand, wenn der Computer nicht mehr hinkriegt. Man sagt, das werden sie in der Komplexitätstheorie, werden sie das genauer einführen, der Aufwand, um diese Teile zu finden, der steigt exponentiell mit der Länge der Zahl, das heißt, wenn sie die Länge der Zahl, machen wir es in Dezimalziffern, eigentlich rechnen wir da ein Bit, aber das ist auch wieder nur ein Faktor, also wenn wir es in Dezimalziffern sagen, dann kriegen sie also eine Zahl, zum Beispiel mit 10 Stellen und angenommen sie nehmen jetzt eine Zahl mit 11 Stellen und würden da alle kleineren Zahlen durchprobieren wollen, dann würde das bedeuten, dass sie 10 mal so viele Zahlen zur Auswahl haben, also wenn sie statt den Zahlen von 1 bis 100 durchzuprobieren, die Zahlen von 1 bis 1000 durchprobieren müssten, dann müssten sie 10 mal so viele Zahlen durchprobieren. Das heißt, sie mit einer Stelle mehr kriegen sie entsprechenden Faktor 10 in ihren Aufwand hinein und das ist etwas, was ihnen ganz, ganz schnell das Genick bricht, denn selbst wenn ihr Computer das im Millisekundenbereich hinkriegt für eine Zahl, also egal, wie schnell ihr Computer, der schnellste Computer der Welt ist, wenn der das im Millisekundenbereich schafft, dann packen sie halt 5 Ziffern mehr dazu, dann ist das schon irgendwie im 10 Millisekundenbereich, dann nehmen sie noch 2 mehr dazu, dann ist das im Sekundenbereich, dann nehmen sie noch 2 Ziffern dazu, dann ist das nicht mehr im Sekundenbereich, sondern dann nehmen sie noch 2 Ziffern dazu, machen wir doch so das das nicht mehr im Sekundenbereich ist im Minutenbereich, noch eins, 2 Ziffern dazu, dann ist das im Stundenbereich, noch irgendwie 2 Ziffern dazu, dann ist das im Tagesbereich, noch 3 Ziffern dazu, dann ist das im Jahresbereich und dann vielleicht nochmal zu sicher Б, 10 Ziffern dazu, dann ist das ein Bereich von irgendwelchen Milliarden von Jahren, die ihr schnellster Computer brauchen würde, das Das heißt einfach nur dadurch, dass Sie ein paar Ziffern dazugeben, bringen Sie jeden Computer mit diesen exponentiell wachsenden Problemen, Komplexitätsproblemen, bringen Sie jeden Computer an seine Grenzen. Und das ist gerade das, worauf diese modernen Kryptografieverfahren, weil eine der Ideen, auf die diese modernen Kryptografieverfahren basieren, es gibt noch andere Ansätze, die die auf Primzahlen basieren, die basieren typischerweise darauf, dass es eben unglaublich aufwendig ist, eine solche Primfaktorzerlegung tatsächlich zu berechnen. Während umgekehrt, wenn Sie zwei Primzahlen haben, können Sie die relativ leicht miteinander multiplizieren, dann kennen Sie das Ergebnis und dann kennen Sie auch die Primfaktorzerlegung zu der Zahl. Und das ist gerade diese Asymmetrie in diesem Public-Private-Key-Verfahren, wir werden das Ganze noch genauer sagen, wir müssen noch sagen, was uns das nutzt, die Primfaktorzerlegung zu kennen, aber das ist die Asymmetrie, die man ausnutzt. Ich kann jemandem ein Produkt aus zwei Primzahlen sagen und wenn das irrsinnig große Zahlen sind, dann kommt der nicht zurück auf die einzelnen beiden Primzahlen. Also auf die Art und Weise kann ich jemandem eine Information geben und behalte aber selber noch eine Geheiminformation, wenn Sie so wollen. Das ist die Asymmetrie von dem Public-Private-Key-Verfahren, warum uns das dann was nutzt, dass wir die Primfaktorzerlegung kennen und der andere nicht und wie uns das bei der Kryptographie hilft, das werden wir uns noch in ein paar Vorlesungen erarbeiten müssen. Vorher wäre jetzt ein guter Zeitpunkt für eine Viertelstunde Pause und wir machen eine Sprechnung für die Nachbitte weiter.